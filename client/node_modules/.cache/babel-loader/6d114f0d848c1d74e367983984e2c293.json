{"ast":null,"code":"var _jsxFileName = \"/Users/simmone/brainstation/simmone-kelly-brainflix-app/src/components/Home-Page/HomePage.js\";\nimport React, { Component } from 'react';\nimport Video from '../2-Video/Video';\nimport BelowVideoSection from '../3-Below-Video/BelowVideoSection';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet apiKey = '2c4911e9-9ba1-4e47-9dc6-1054b805d4c7';\nexport default class HomePage extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      VideoData: [],\n      videoId: null,\n      videoInfo: []\n    };\n\n    this.getNewId = id => {\n      this.setState({\n        videoId: id\n      });\n    };\n  }\n\n  // gets full video list\n  fetchVideoList() {\n    axios.get('https://project-2-api.herokuapp.com/videos?api_key=' + apiKey).then(results => {\n      let videoData = results.data;\n      this.setState({\n        VideoData: videoData,\n        videoId: videoData[0].id\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } // onclick event listener to get clicked element id\n\n\n  //Clicking on a video thumb in the side-videos section\n  //should update the URL. Do not use a click handler to\n  //update state for this scenario. This means you need to\n  //refactor Sprint 1 functionality to utilize the React\n  //Router for this Sprint.\n  //sets initial state\n  componentDidMount() {\n    this.fetchVideoList();\n  } // calls to get video info from axios\n\n\n  fetchVideoInfo(id) {\n    axios.get('https://project-2-api.herokuapp.com/videos/' + id + '?api_key=' + apiKey).then(results => {\n      const videoInfo = results.data;\n      this.setState({\n        videoInfo: videoInfo\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componenet did update'); //checks if current state matches previous state to fetch video info\n\n    if (this.state.videoId !== prevState.videoId) {\n      this.fetchVideoInfo(this.state.videoId);\n      console.log('fetched video info');\n    }\n\n    console.log(this.props.match.params.id); //checks to see if id is available\n\n    if (this.props.match.params.id) {\n      const videoId = this.props.match.params.id;\n      console.log('checking video id'); //why does this run so many times?\n      //checks to see if id param matches previous state id to then set state\n\n      if (prevState.videoId !== videoId) {\n        this.setState({\n          videoId: videoId\n        });\n      }\n    } else if (!this.props.match.params.id && prevProps.match.params.id) {\n      this.setState({\n        videoId: this.state.VideoData[0].id\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('home will unmount');\n  }\n\n  render() {\n    const currentVideoIndex = this.state.VideoData.findIndex(element => element.id === this.state.videoId);\n\n    if (!this.state.videoId) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Video, {\n        currentVideo: this.state.VideoData[currentVideoIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(BelowVideoSection, {\n        currentVideo: this.state.VideoData[currentVideoIndex],\n        getNewId: this.getNewId,\n        videosList: this.state.VideoData,\n        routerProps: this.props,\n        videoInfo: this.state.videoInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/simmone/brainstation/simmone-kelly-brainflix-app/src/components/Home-Page/HomePage.js"],"names":["React","Component","Video","BelowVideoSection","axios","apiKey","HomePage","state","VideoData","videoId","videoInfo","getNewId","id","setState","fetchVideoList","get","then","results","videoData","data","catch","error","console","log","componentDidMount","fetchVideoInfo","componentDidUpdate","prevProps","prevState","props","match","params","componentWillUnmount","render","currentVideoIndex","findIndex","element"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,IAAIC,MAAM,GAAG,sCAAb;AAGA,eAAe,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE5CM,KAF4C,GAEpC;AACJC,MAAAA,SAAS,EAAE,EADP;AAEJC,MAAAA,OAAO,EAAE,IAFL;AAGJC,MAAAA,SAAS,EAAE;AAHP,KAFoC;;AAAA,SAwB5CC,QAxB4C,GAwBhCC,EAAD,IAAQ;AACf,WAAKC,QAAL,CAAc;AAACJ,QAAAA,OAAO,EAAEG;AAAV,OAAd;AACH,KA1B2C;AAAA;;AAQ5C;AACAE,EAAAA,cAAc,GAAG;AACbV,IAAAA,KAAK,CAACW,GAAN,CAAU,wDAAwDV,MAAlE,EACCW,IADD,CACMC,OAAO,IAAI;AACb,UAAIC,SAAS,GAAGD,OAAO,CAACE,IAAxB;AACA,WAAKN,QAAL,CAAc;AACVL,QAAAA,SAAS,EAAEU,SADD;AAEVT,QAAAA,OAAO,EAAES,SAAS,CAAC,CAAD,CAAT,CAAaN;AAFZ,OAAd;AAIH,KAPD,EAQCQ,KARD,CAQOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAVD;AAWH,GArB2C,CAuB5C;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACAG,EAAAA,iBAAiB,GAAG;AAChB,SAAKV,cAAL;AACH,GApC2C,CAsC5C;;;AACAW,EAAAA,cAAc,CAACb,EAAD,EAAK;AACfR,IAAAA,KAAK,CAACW,GAAN,CAAU,gDAAgDH,EAAhD,GAAqD,WAArD,GAAmEP,MAA7E,EACCW,IADD,CACMC,OAAO,IAAI;AACb,YAAMP,SAAS,GAAGO,OAAO,CAACE,IAA1B;AACA,WAAKN,QAAL,CAAc;AACVH,QAAAA,SAAS,EAAEA;AADD,OAAd;AAGH,KAND,EAOCU,KAPD,CAOOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KATD;AAUH;;AAEDK,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrCN,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADqC,CAErC;;AACA,QAAI,KAAKhB,KAAL,CAAWE,OAAX,KAAuBmB,SAAS,CAACnB,OAArC,EAA8C;AAC1C,WAAKgB,cAAL,CAAoB,KAAKlB,KAAL,CAAWE,OAA/B;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBnB,EAApC,EAPqC,CAQrC;;AACA,QAAG,KAAKiB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBnB,EAA3B,EAA+B;AAC3B,YAAMH,OAAO,GAAG,KAAKoB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBnB,EAAxC;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAF2B,CAEM;AACjC;;AACA,UAAIK,SAAS,CAACnB,OAAV,KAAsBA,OAA1B,EAAmC;AAC/B,aAAKI,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAEA;AAAV,SAAd;AACH;AACJ,KAPD,MAOO,IAAI,CAAC,KAAKoB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBnB,EAAzB,IAA+Be,SAAS,CAACG,KAAV,CAAgBC,MAAhB,CAAuBnB,EAA1D,EAA6D;AAChE,WAAKC,QAAL,CAAc;AACVJ,QAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,SAAX,CAAqB,CAArB,EAAwBI;AADvB,OAAd;AAGH;AAEJ;;AAEDoB,EAAAA,oBAAoB,GAAG;AACnBV,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;;AAEDU,EAAAA,MAAM,GAAI;AAEV,UAAMC,iBAAiB,GAAG,KAAK3B,KAAL,CAAWC,SAAX,CAAqB2B,SAArB,CAA+BC,OAAO,IAAIA,OAAO,CAACxB,EAAR,KAAe,KAAKL,KAAL,CAAWE,OAApE,CAA1B;;AAEA,QAAI,CAAC,KAAKF,KAAL,CAAWE,OAAhB,EAAyB;AACrB,aAAO,IAAP;AACH;;AAED,wBACI;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,YAAY,EAAE,KAAKF,KAAL,CAAWC,SAAX,CAAqB0B,iBAArB;AAArB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,iBAAD;AACI,QAAA,YAAY,EAAE,KAAK3B,KAAL,CAAWC,SAAX,CAAqB0B,iBAArB,CADlB;AAEI,QAAA,QAAQ,EAAE,KAAKvB,QAFnB;AAGI,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWC,SAH3B;AAII,QAAA,WAAW,EAAE,KAAKqB,KAJtB;AAKI,QAAA,SAAS,EAAE,KAAKtB,KAAL,CAAWG;AAL1B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUE;;AAlG0C","sourcesContent":["import React, { Component } from 'react';\nimport Video from '../2-Video/Video';\nimport BelowVideoSection from '../3-Below-Video/BelowVideoSection';\nimport axios from 'axios';\nlet apiKey = '2c4911e9-9ba1-4e47-9dc6-1054b805d4c7'\n\n\nexport default class HomePage extends Component {\n\n    state = {\n        VideoData: [],\n        videoId: null,\n        videoInfo: [],\n    };\n\n    // gets full video list\n    fetchVideoList() {\n        axios.get('https://project-2-api.herokuapp.com/videos?api_key=' + apiKey)\n        .then(results => {\n            let videoData = results.data;\n            this.setState({\n                VideoData: videoData,\n                videoId: videoData[0].id,\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        });\n    }\n  \n    // onclick event listener to get clicked element id\n    getNewId = (id) => {\n        this.setState({videoId: id});\n    }\n    //Clicking on a video thumb in the side-videos section\n    //should update the URL. Do not use a click handler to\n    //update state for this scenario. This means you need to\n    //refactor Sprint 1 functionality to utilize the React\n    //Router for this Sprint.\n\n    //sets initial state\n    componentDidMount() {\n        this.fetchVideoList();\n    }\n\n    // calls to get video info from axios\n    fetchVideoInfo(id) {\n        axios.get('https://project-2-api.herokuapp.com/videos/' + id + '?api_key=' + apiKey)\n        .then(results => {\n            const videoInfo = results.data;\n            this.setState({\n                videoInfo: videoInfo,\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('componenet did update')\n        //checks if current state matches previous state to fetch video info\n        if (this.state.videoId !== prevState.videoId) {\n            this.fetchVideoInfo(this.state.videoId)\n            console.log('fetched video info')\n        }\n        console.log(this.props.match.params.id)\n        //checks to see if id is available\n        if(this.props.match.params.id) {\n            const videoId = this.props.match.params.id;\n            console.log('checking video id') //why does this run so many times?\n            //checks to see if id param matches previous state id to then set state\n            if (prevState.videoId !== videoId) {\n                this.setState({videoId: videoId})\n            }\n        } else if (!this.props.match.params.id && prevProps.match.params.id){\n            this.setState({\n                videoId: this.state.VideoData[0].id,\n            })\n        }\n        \n    }\n\n    componentWillUnmount() {\n        console.log('home will unmount')\n    }\n\n    render () {\n\n    const currentVideoIndex = this.state.VideoData.findIndex(element => element.id === this.state.videoId);\n\n    if (!this.state.videoId) {\n        return null\n    }\n\n    return (\n        <div>\n            <Video currentVideo={this.state.VideoData[currentVideoIndex]} />\n            <BelowVideoSection\n                currentVideo={this.state.VideoData[currentVideoIndex]}\n                getNewId={this.getNewId}\n                videosList={this.state.VideoData}\n                routerProps={this.props}\n                videoInfo={this.state.videoInfo}/>\n        </div>\n    )}\n}\n\n"]},"metadata":{},"sourceType":"module"}